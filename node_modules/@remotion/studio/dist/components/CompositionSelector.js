"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositionSelector = exports.compositionSelectorRef = exports.getKeysToExpand = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const colors_1 = require("../helpers/colors");
const create_folder_tree_1 = require("../helpers/create-folder-tree");
const persist_open_folders_1 = require("../helpers/persist-open-folders");
const z_index_1 = require("../state/z-index");
const CompositionSelectorItem_1 = require("./CompositionSelectorItem");
const CurrentComposition_1 = require("./CurrentComposition");
const InitialCompositionLoader_1 = require("./InitialCompositionLoader");
const container = {
    display: 'flex',
    flexDirection: 'column',
    flex: 1,
    overflow: 'hidden',
    backgroundColor: colors_1.BACKGROUND,
};
const getKeysToExpand = (initialFolderName, parentFolderName, initial = []) => {
    initial.push((0, persist_open_folders_1.openFolderKey)({
        folderName: initialFolderName,
        parentName: parentFolderName,
    }));
    const { name, parent } = (0, create_folder_tree_1.splitParentIntoNameAndParent)(parentFolderName);
    if (!name) {
        return initial;
    }
    return (0, exports.getKeysToExpand)(name, parent, initial);
};
exports.getKeysToExpand = getKeysToExpand;
exports.compositionSelectorRef = (0, react_1.createRef)();
const CompositionSelector = () => {
    const { compositions, canvasContent, folders } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const [foldersExpanded, setFoldersExpanded] = (0, react_1.useState)((0, persist_open_folders_1.loadExpandedFolders)('compositions'));
    const { tabIndex } = (0, z_index_1.useZIndex)();
    const selectComposition = (0, InitialCompositionLoader_1.useSelectComposition)();
    const toggleFolder = (0, react_1.useCallback)((folderName, parentName) => {
        setFoldersExpanded((p) => {
            var _a;
            const key = (0, persist_open_folders_1.openFolderKey)({ folderName, parentName });
            const prev = (_a = p[key]) !== null && _a !== void 0 ? _a : false;
            const foldersExpandedState = {
                ...p,
                [key]: !prev,
            };
            (0, persist_open_folders_1.persistExpandedFolders)('compositions', foldersExpandedState);
            return foldersExpandedState;
        });
    }, []);
    (0, react_1.useImperativeHandle)(exports.compositionSelectorRef, () => {
        return {
            expandComposition: (compName) => {
                const compositionToExpand = compositions.find((c) => c.id === compName);
                if (!compositionToExpand) {
                    return;
                }
                const { folderName, parentFolderName } = compositionToExpand;
                if (folderName === null) {
                    return;
                }
                setFoldersExpanded((previousState) => {
                    const foldersExpandedState = {
                        ...previousState,
                    };
                    const currentFolder = folderName;
                    const currentParentName = parentFolderName;
                    const key = (0, persist_open_folders_1.openFolderKey)({
                        folderName: currentFolder,
                        parentName: currentParentName,
                    });
                    const splitted = key.split('/');
                    for (let i = 0; i < splitted.length - 1; i++) {
                        const allExceptLast = i === 0
                            ? (0, persist_open_folders_1.openFolderKey)({
                                folderName: splitted.filter((s) => s !== 'no-parent')[0],
                                parentName: null,
                            })
                            : splitted.slice(0, i + 1).join('/');
                        foldersExpandedState[allExceptLast] = true;
                    }
                    (0, persist_open_folders_1.persistExpandedFolders)('compositions', foldersExpandedState);
                    return foldersExpandedState;
                });
            },
        };
    }, [compositions]);
    const items = (0, react_1.useMemo)(() => {
        return (0, create_folder_tree_1.createFolderTree)(compositions, folders, foldersExpanded);
    }, [compositions, folders, foldersExpanded]);
    const showCurrentComposition = canvasContent && canvasContent.type === 'composition';
    const list = (0, react_1.useMemo)(() => {
        return {
            height: showCurrentComposition
                ? `calc(100% - ${CurrentComposition_1.CURRENT_COMPOSITION_HEIGHT}px)`
                : '100%',
            overflowY: 'auto',
        };
    }, [showCurrentComposition]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: container, children: [showCurrentComposition ? (0, jsx_runtime_1.jsx)(CurrentComposition_1.CurrentComposition, {}) : null, (0, jsx_runtime_1.jsx)("div", { className: "__remotion-vertical-scrollbar", style: list, children: items.map((c) => {
                    return ((0, jsx_runtime_1.jsx)(CompositionSelectorItem_1.CompositionSelectorItem, { level: 0, currentComposition: showCurrentComposition ? canvasContent.compositionId : null, selectComposition: selectComposition, toggleFolder: toggleFolder, tabIndex: tabIndex, item: c }, c.key + c.type));
                }) })] }));
};
exports.CompositionSelector = CompositionSelector;
