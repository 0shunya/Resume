import type { Codec, LogLevel, X264Preset } from '@remotion/renderer';
import type { UiOpenGlOptions } from '@remotion/studio-shared';
import React from 'react';
export type RenderType = 'still' | 'video' | 'audio' | 'sequence';
export declare const RenderModalAdvanced: React.FC<{
    readonly renderMode: RenderType;
    readonly minConcurrency: number;
    readonly maxConcurrency: number;
    readonly setConcurrency: React.Dispatch<React.SetStateAction<number>>;
    readonly concurrency: number;
    readonly setVerboseLogging: React.Dispatch<React.SetStateAction<LogLevel>>;
    readonly logLevel: LogLevel;
    readonly delayRenderTimeout: number;
    readonly setDelayRenderTimeout: React.Dispatch<React.SetStateAction<number>>;
    readonly disallowParallelEncoding: boolean;
    readonly setDisallowParallelEncoding: React.Dispatch<React.SetStateAction<boolean>>;
    readonly setDisableWebSecurity: React.Dispatch<React.SetStateAction<boolean>>;
    readonly setIgnoreCertificateErrors: React.Dispatch<React.SetStateAction<boolean>>;
    readonly setHeadless: React.Dispatch<React.SetStateAction<boolean>>;
    readonly headless: boolean;
    readonly ignoreCertificateErrors: boolean;
    readonly disableWebSecurity: boolean;
    readonly openGlOption: UiOpenGlOptions;
    readonly setOpenGlOption: React.Dispatch<React.SetStateAction<UiOpenGlOptions>>;
    readonly envVariables: [string, string][];
    readonly setEnvVariables: React.Dispatch<React.SetStateAction<[string, string][]>>;
    readonly x264Preset: X264Preset | null;
    readonly setx264Preset: React.Dispatch<React.SetStateAction<X264Preset>>;
    readonly offthreadVideoCacheSizeInBytes: number | null;
    readonly setOffthreadVideoCacheSizeInBytes: React.Dispatch<React.SetStateAction<number | null>>;
    readonly codec: Codec;
    readonly enableMultiProcessOnLinux: boolean;
    readonly setChromiumMultiProcessOnLinux: React.Dispatch<React.SetStateAction<boolean>>;
    readonly userAgent: string | null;
    readonly setUserAgent: React.Dispatch<React.SetStateAction<string | null>>;
    readonly beep: boolean;
    readonly setBeep: React.Dispatch<React.SetStateAction<boolean>>;
    readonly repro: boolean;
    readonly setRepro: React.Dispatch<React.SetStateAction<boolean>>;
}>;
