import type { AudioCodec, Codec, ColorSpace, LogLevel, PixelFormat, ProResProfile, StillImageFormat, VideoImageFormat, X264Preset } from '@remotion/renderer';
import type { CanUpdateDefaultPropsResponse, EnumPath, RecastCodemod, RenderJob, RequiredChromiumOptions } from '@remotion/studio-shared';
export declare const addStillRenderJob: ({ compositionId, outName, imageFormat, jpegQuality, frame, scale, logLevel, chromiumOptions, delayRenderTimeout, envVariables, inputProps, offthreadVideoCacheSizeInBytes, multiProcessOnLinux, beepOnFinish, metadata, }: {
    compositionId: string;
    outName: string;
    imageFormat: StillImageFormat;
    jpegQuality: number;
    frame: number;
    scale: number;
    logLevel: LogLevel;
    chromiumOptions: RequiredChromiumOptions;
    delayRenderTimeout: number;
    envVariables: Record<string, string>;
    inputProps: Record<string, unknown>;
    offthreadVideoCacheSizeInBytes: number | null;
    multiProcessOnLinux: boolean;
    beepOnFinish: boolean;
    metadata: Record<string, string> | null;
}) => Promise<undefined>;
export declare const addSequenceRenderJob: ({ compositionId, outName, imageFormat, startFrame, endFrame, scale, logLevel, chromiumOptions, delayRenderTimeout, envVariables, inputProps, concurrency, offthreadVideoCacheSizeInBytes, jpegQuality, disallowParallelEncoding, multiProcessOnLinux, beepOnFinish, repro, metadata, }: {
    compositionId: string;
    outName: string;
    imageFormat: VideoImageFormat;
    jpegQuality: number;
    startFrame: number;
    endFrame: number;
    scale: number;
    logLevel: LogLevel;
    chromiumOptions: RequiredChromiumOptions;
    concurrency: number;
    delayRenderTimeout: number;
    envVariables: Record<string, string>;
    inputProps: Record<string, unknown>;
    offthreadVideoCacheSizeInBytes: number | null;
    disallowParallelEncoding: boolean;
    multiProcessOnLinux: boolean;
    beepOnFinish: boolean;
    repro: boolean;
    metadata: Record<string, string> | null;
}) => Promise<undefined>;
export declare const addVideoRenderJob: ({ compositionId, outName, imageFormat, jpegQuality, scale, logLevel, codec, concurrency, crf, startFrame, endFrame, muted, enforceAudioTrack, proResProfile, x264Preset, pixelFormat, audioBitrate, videoBitrate, everyNthFrame, numberOfGifLoops, delayRenderTimeout, audioCodec, disallowParallelEncoding, chromiumOptions, envVariables, inputProps, offthreadVideoCacheSizeInBytes, colorSpace, multiProcessOnLinux, encodingMaxRate, encodingBufferSize, beepOnFinish, repro, forSeamlessAacConcatenation, separateAudioTo, metadata, }: {
    compositionId: string;
    outName: string;
    imageFormat: VideoImageFormat;
    jpegQuality: number | null;
    scale: number;
    logLevel: LogLevel;
    codec: Codec;
    concurrency: number;
    crf: number | null;
    startFrame: number;
    endFrame: number;
    muted: boolean;
    enforceAudioTrack: boolean;
    proResProfile: ProResProfile | null;
    x264Preset: X264Preset | null;
    pixelFormat: PixelFormat;
    audioBitrate: string | null;
    videoBitrate: string | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    delayRenderTimeout: number;
    audioCodec: AudioCodec;
    disallowParallelEncoding: boolean;
    chromiumOptions: RequiredChromiumOptions;
    envVariables: Record<string, string>;
    inputProps: Record<string, unknown>;
    offthreadVideoCacheSizeInBytes: number | null;
    colorSpace: ColorSpace;
    multiProcessOnLinux: boolean;
    encodingMaxRate: string | null;
    encodingBufferSize: string | null;
    beepOnFinish: boolean;
    repro: boolean;
    forSeamlessAacConcatenation: boolean;
    separateAudioTo: string | null;
    metadata: Record<string, string> | null;
}) => Promise<undefined>;
export declare const unsubscribeFromFileExistenceWatcher: ({ file, clientId, }: {
    file: string;
    clientId: string;
}) => Promise<undefined>;
export declare const subscribeToFileExistenceWatcher: ({ file, clientId, }: {
    file: string;
    clientId: string;
}) => Promise<boolean>;
export declare const openInFileExplorer: ({ directory }: {
    directory: string;
}) => Promise<void>;
export declare const applyCodemod: ({ codemod, dryRun, signal, }: {
    codemod: RecastCodemod;
    dryRun: boolean;
    signal: AbortController["signal"];
}) => Promise<import("@remotion/studio-shared").ApplyCodemodResponse>;
export declare const removeRenderJob: (job: RenderJob) => Promise<undefined>;
export declare const cancelRenderJob: (job: RenderJob) => Promise<import("@remotion/studio-shared").CancelRenderResponse>;
export declare const updateAvailable: (signal: AbortSignal) => Promise<import("@remotion/studio-shared").UpdateAvailableResponse>;
export declare const getProjectInfo: (signal: AbortSignal) => Promise<import("@remotion/studio-shared").ProjectInfoResponse>;
export declare const callUpdateDefaultPropsApi: (compositionId: string, defaultProps: Record<string, unknown>, enumPaths: EnumPath[]) => Promise<import("@remotion/studio-shared").UpdateDefaultPropsResponse>;
export declare const canUpdateDefaultProps: (compositionId: string, readOnlyStudio: boolean) => Promise<CanUpdateDefaultPropsResponse>;
